2023-07-08 and 2023-07-09

Renamed some stuff, dom nodes vs sub results (haha funny because kinky)

Now things are like this:

    DOMNode ---update--> SubFrame ---render--> ?
    ^            ^                      ^
    |            |                      |
    |            triggered by Neovim    dependent on back-end
    user-configured

Still todo:

- [ ] implement vim buffer rendering back-end
- [ ] make sure Static nodes are cache-aware
- [ ] Anchor DOMNodes in roots that will trigger update and call render
- [ ] embed styles/highlights into SubFrame

2023-07-04

Completed implementation of layout + rendering algorithm. It should look
something like this:

    Fidgets ---update--> UpdateResult ---render--> Neovim/string[]
    ^          ^                         ^
    |          |                         |
    |          triggered by Neovim       dependent on back-end
    user-configured


    widget layout --> buffer rendering --> Neovim/string[]

Implemented crude, append-based string[] rendering algorithm.

Still todo:

- [x] test container and fill layout algorithms
- [x] push coroutine triggering logic into node subclass (doesn't need to be exposed at Node level)
- [-] implement persist flag, so that nodes can manage their own/each others' lifetimes
    --- WONTFIX, this is too complicated imo and goes against the strictly declarative aspect of
- [ ] implement vim buffer rendering back-end

2023-08-09

Containers no longer need to maintain their own cache. That cache will be kept
globally, and used to populate the new SubFrame tree while recursively
traversing down it.

Update now returns 3 values: SubFrame|true, width, and height. This way, when
the first return value is true (use cache), width and height can still be used
to calculate the dimensions for the remaining siblings.

Changed SubFrame structure to have dimensions contained in the outer table. This
makes it easier for static nodes to return the same exact SubFrame every time
rather than re-allocating/modifying, and it also better follows the idea that
the context should determine the layout/truncation of the inner contents. Also,
it makes the 3 return values make more sense (no redundant dimensions). Minor
point: the way these are laid out should also make access time faster since it's
SoA rather than AoS (not that this matters very much).

